{"version":3,"file":"laravel-blame.umd.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;;;;;;;;;;;;ACAA;AACA;;AAEA;AACA;AACA,MAAM,KAAuC,EAAE,yBAQ5C;;AAEH;AACA;AACA,IAAI,qBAAuB;AAC3B;AACA;;AAEA;AACA,oDAAe,IAAI;;;ACtBnB,+BAA+B,6BAA6B,iBAAiB,qBAAqB,cAAc,sCAAsC,wCAAwC,mBAAmB,oHAAoH,mBAAmB,cAAc,2CAA2C,yCAAyC,8BAA8B,cAAc,8CAA8C,wBAAwB,cAAc,aAAa,sGAAsG,qCAAqC,wCAAwC,WAAW,4HAA4H,KAAK,2BAA2B,sFAAsF,uBAAuB,iCAAiC,iBAAiB,oEAAoE,KAAK,8FAA8F,KAAK,8CAA8C,qBAAqB,aAAa,oDAAoD,yJAAyJ,iBAAiB,oIAAoI,YAAY,yBAAyB,cAAc,4DAA4D,iBAAiB,cAAc,aAAa,8IAA8I,qCAAqC,iCAAiC,WAAW,wLAAwL,KAAK,2BAA2B,0GAA0G,uBAAuB,iCAAiC,iBAAiB,qFAAqF,KAAK,+GAA+G,KAAK,+DAA+D,kBAAkB,kCAAkC,GAAG,aAAa,oDAAoD,sCAAsC;AAC90F;AACA;;;;;AC8BsB;;AAEtB,uEAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AC7IgI,CAAC,2EAAe,gCAAG,EAAC;;ACArJ;;AAEA;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AC/FuF;AAC3B;AACL;;;AAGvD;AACA,CAAgG;AAChG,gBAAgB,kBAAU;AAC1B,EAAE,oCAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAe;;AClBS;AACA;AACxB,gDAAe,SAAG;AACI","sources":["webpack://laravel-blame/webpack/universalModuleDefinition","webpack://laravel-blame/webpack/bootstrap","webpack://laravel-blame/webpack/runtime/define property getters","webpack://laravel-blame/webpack/runtime/hasOwnProperty shorthand","webpack://laravel-blame/webpack/runtime/publicPath","webpack://laravel-blame/./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://laravel-blame/./src/Component.vue?67e4","webpack://laravel-blame/src/Component.vue","webpack://laravel-blame/./src/Component.vue?ff61","webpack://laravel-blame/./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js","webpack://laravel-blame/./src/Component.vue","webpack://laravel-blame/./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"laravel-blame\"] = factory();\n\telse\n\t\troot[\"laravel-blame\"] = factory();\n})((typeof self !== 'undefined' ? self : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"\";","/* eslint-disable no-var */\n// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var currentScript = window.document.currentScript\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    var getCurrentScript = require('@soda/get-current-script')\n    currentScript = getCurrentScript()\n\n    // for backward compatibility, because previously we directly included the polyfill\n    if (!('currentScript' in document)) {\n      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })\n    }\n  }\n\n  var src = currentScript && currentScript.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/)\n  if (src) {\n    __webpack_public_path__ = src[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"w-full\"},[_c('label',{staticClass:\"block text-sm font-bold\"},[_vm._v(\"Laravel Blame\")]),_c('small',{staticClass:\"mb-2\"},[_vm._v(\"Select the Entities to set as Blamable, \")]),(_vm.pluginData && _vm.projetcEntities.length > 0)?_c('div',{staticClass:\"mt-5\"},[_c('label',{staticClass:\"block text-sm font-bold mb-2\"},[_vm._v(\"Project Entities\")]),_c('div',{staticClass:\"form-check mb-3\"},[_c('label',{staticClass:\"inline-flex items-center\",attrs:{\"for\":\"selectAllCruds\"}},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.pluginData.allSelected),expression:\"pluginData.allSelected\"}],staticClass:\"form-checkbox\",attrs:{\"type\":\"checkbox\",\"id\":\"selectAllCruds\"},domProps:{\"checked\":Array.isArray(_vm.pluginData.allSelected)?_vm._i(_vm.pluginData.allSelected,null)>-1:(_vm.pluginData.allSelected)},on:{\"change\":[function($event){var $$a=_vm.pluginData.allSelected,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.$set(_vm.pluginData, \"allSelected\", $$a.concat([$$v])))}else{$$i>-1&&(_vm.$set(_vm.pluginData, \"allSelected\", $$a.slice(0,$$i).concat($$a.slice($$i+1))))}}else{_vm.$set(_vm.pluginData, \"allSelected\", $$c)}},_vm.selectAllData]}}),_c('span',{staticClass:\"ml-2 text-gray-800 dark:text-gray-300\"},[_vm._v(\"Select All-\")])])]),(_vm.pluginData.entities && Object.keys(_vm.pluginData.entities).length > 0)?_vm._l((_vm.projetcEntities),function(entity){return _c('div',{key:'entity' + entity.id,staticClass:\"bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-900 p-2 rounded-md my-3\"},[_c('div',{staticClass:\"form-check\"},[_c('label',{staticClass:\"inline-flex items-center text-gray-800\",attrs:{\"for\":entity.id}},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.pluginData.entities[entity.id]['selected']),expression:\"pluginData.entities[entity.id]['selected']\"}],staticClass:\"form-checkbox\",attrs:{\"type\":\"checkbox\",\"id\":entity.id},domProps:{\"checked\":Array.isArray(_vm.pluginData.entities[entity.id]['selected'])?_vm._i(_vm.pluginData.entities[entity.id]['selected'],null)>-1:(_vm.pluginData.entities[entity.id]['selected'])},on:{\"change\":[function($event){var $$a=_vm.pluginData.entities[entity.id]['selected'],$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.$set(_vm.pluginData.entities[entity.id], 'selected', $$a.concat([$$v])))}else{$$i>-1&&(_vm.$set(_vm.pluginData.entities[entity.id], 'selected', $$a.slice(0,$$i).concat($$a.slice($$i+1))))}}else{_vm.$set(_vm.pluginData.entities[entity.id], 'selected', $$c)}},function($event){return _vm.toggleCrudData(entity)}]}}),_c('span',{staticClass:\"ml-2 text-gray-800 dark:text-gray-100\"},[_vm._v(_vm._s(entity.name))])])])])}):[_c('p',[_vm._v(\"Loading entities or no entities found in plugin data...\")])]],2):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"w-full\">\n        <label class=\"block text-sm font-bold \">Laravel Blame</label>\n        <small class=\"mb-2\">Select the Entities to set as Blamable, </small>\n        \n        <div class=\"mt-5\" v-if=\"pluginData && projetcEntities.length > 0\">\n            <label class=\"block text-sm font-bold mb-2\">Project Entities</label>\n\n            <div class=\"form-check mb-3\">\n                <label class=\"inline-flex items-center\" for=\"selectAllCruds\">\n                    <input class=\"form-checkbox\" type=\"checkbox\" id=\"selectAllCruds\" @change=\"selectAllData\" v-model=\"pluginData.allSelected\">\n                    <span class=\"ml-2 text-gray-800 dark:text-gray-300\">Select All-</span>\n                </label>\n            </div>\n            <template v-if=\"pluginData.entities && Object.keys(pluginData.entities).length > 0\">\n                <div class=\"bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-900 p-2 rounded-md my-3\" v-for=\"entity in projetcEntities\" :key=\"'entity' + entity.id\">\n                    <div class=\"form-check\">\n                        <label class=\"inline-flex items-center text-gray-800\" :for=\"entity.id\">\n                            <input class=\"form-checkbox\" type=\"checkbox\" v-model=\"pluginData.entities[entity.id]['selected']\" :id=\"entity.id\" @change=\"toggleCrudData(entity)\">\n                            <span class=\"ml-2 text-gray-800 dark:text-gray-100\">{{ entity.name }}</span>\n                        </label>\n                    </div>\n                </div>\n            </template>\n            <template v-else>\n                <p>Loading entities or no entities found in plugin data...</p>\n            </template>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Vue from 'vue'; // Import Vue for $set\n\nexport default {\n    data() {\n        return {\n            projetcEntities: [],\n            pluginData: {\n                entities: {}, // Initialize as an object\n                allSelected: false\n            }, // Initialize pluginData structure\n        }\n    },\n\n    created() {\n        this.pluginConsole = window.vemtoApi.pluginConsole\n        this.pluginConsole.log('creating plugin instance' )\n\n        this.pluginData = window.vemtoApi.getPluginData()\n        // Ensure pluginData and entities exist and are objects\n        if (!this.pluginData) this.pluginData = {};\n        if (!this.pluginData.entities || Array.isArray(this.pluginData.entities)) { // Handle case where it might be null or array from mock\n            this.pluginData.entities = {};\n        }\n        this.projetcEntities = window.vemtoApi.getProject()?.entities || [];\n\n        this.pluginConsole.log(window.vemtoApi.getProject().entities)\n\n        // Always check for new entities\n        this.checkNewProjectEntities()\n\n        this.pluginConsole.log('Plugin Intance Created' )\n\n    },\n\n    methods: {\n        checkNewProjectEntities() {\n            this.pluginConsole.log('Checking project entities');\n            // Ensure projetcEntities is populated before iterating\n            if (!this.projetcEntities || this.projetcEntities.length === 0) {\n                 this.projetcEntities = window.vemtoApi.getProject()?.entities || [];\n            }\n            // Ensure pluginData.entities is an object before adding properties\n            if (!this.pluginData.entities) {\n                this.pluginData.entities = {};\n            }\n\n            this.projetcEntities.forEach(entity => {\n                let entityData = {\n                    id: entity.id, // Ensure these properties exist on the mock/real entity object\n                    name: entity.name, // Ensure these properties exist on the mock/real entity object\n                    selected: this.pluginData.entities[entity.id]?.selected ?? false, // Preserve existing selection if available\n                }\n                try {\n                    // Use Vue.$set or this.$set for Vue 2 reactivity when adding new properties\n                    if(!this.pluginData.entities[entity.id]) {\n                         // Use this.$set for Vue 2 reactivity\n                         this.$set(this.pluginData.entities, entity.id, entityData);\n                         this.pluginConsole.log(`Added new entity to plugin data: ${entity.name}`);\n                    } else {\n                         // Optionally update existing entry if needed, e.g., name changes\n                         // this.pluginData.entities[entity.id] = { ...this.pluginData.entities[entity.id], ...entityData };\n                         // If updating nested properties, might need $set as well:\n                         // this.$set(this.pluginData.entities[entity.id], 'name', entityData.name);\n                    }\n                } catch (e) {\n                    this.pluginConsole.error(e)\n                }\n            });\n\n            // Optional: Remove entities from pluginData that no longer exist in the project\n            // ... logic to compare keys in this.pluginData.entities with ids in this.projetcEntities ...\n\n            this.pluginConsole.log('check finished')\n            this.save()\n        },\n        toggleCrudData(entity){\n            this.pluginConsole.log(this.pluginData.entities[entity.id]['selected']==='boolean')\n            this.pluginConsole.log(`before Toggled entity: ${entity.name} - ${(this.pluginData.entities[entity.id]['selected']===true)}`)\n            // Ensure the entity exists in pluginData before toggling\n            if (this.pluginData.entities && this.pluginData.entities[entity.id]) {\n                // Ensure 'selected' property exists before toggling\n                if (typeof this.pluginData.entities[entity.id]['selected'] === 'boolean') {\n                    this.pluginData.entities[entity.id]['selected'] = !this.pluginData.entities[entity.id]['selected'];\n                } else {\n                    // Initialize if 'selected' is missing or not a boolean\n                    this.pluginData.entities[entity.id]['selected'] = true; // Or false, depending on desired default toggle state\n                }\n                this.save() // Call save directly, no need for savePluginData wrapper if save does it\n            } else {\n                this.pluginConsole.error(`Attempted to toggle non-existent entity: ${entity.id}`);\n            }\n            this.pluginConsole.log(`Toggled entity: ${entity.name} - ${this.pluginData.entities[entity.id]['selected']}`)\n        },\n        selectAllData() {\n            const newState = this.pluginData.allSelected; // The state *after* the checkbox is clicked\n            Object.keys(this.pluginData.entities).forEach(entityId => {\n                this.pluginData.entities[entityId].selected = newState;\n            });\n            this.save();\n        },\n        save: window.vemtoApi.debounce(function() {\n            this.pluginConsole.log('Saving plugin data')\n            window.vemtoApi.savePluginData({\n                entities: this.pluginData.entities,\n                allSelected: this.pluginData.allSelected ?? false,\n            })\n            this.pluginConsole.log('Saved plugin data')\n        }, 300)\n    }\n}\n</script>","import mod from \"-!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Component.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Component.vue?vue&type=script&lang=js\"","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent(\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */,\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options =\n    typeof scriptExports === 'function' ? scriptExports.options : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) {\n    // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n          injectStyles.call(\n            this,\n            (options.functional ? this.parent : this).$root.$options.shadowRoot\n          )\n        }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","import { render, staticRenderFns } from \"./Component.vue?vue&type=template&id=86dfab62\"\nimport script from \"./Component.vue?vue&type=script&lang=js\"\nexport * from \"./Component.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"names":[],"sourceRoot":""}